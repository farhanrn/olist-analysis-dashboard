# revenue.py

import streamlit as st
import pandas as pd
import numpy as np
import streamlit_shadcn_ui as ui  # type: ignore
import locale  # Import locale for currency formatting
import matplotlib.pyplot as plt
import seaborn as sns
import time
from babel.numbers import format_currency

# Dataset Preparation
dataset = "https://raw.githubusercontent.com/farhanrn/olist-analysis-dashboard/refs/heads/main/Data/all_data.csv"
all_data = pd.read_csv(dataset)

# ======================================================================================================
def main():
    st.title("ðŸ“ˆ Revenue Analysis")
    
    # ======================================= CARDS ======================================================== 
    # Sample revenue data for each year
    PENDAPATAN = ["41544.13", "6111446.43", "7375125.31"]
    
    # Function to format numbers as Brazilian currency
    def format_brl(amount):
        try:
            return format_currency(float(amount), 'BRL', locale='pt_BR')
        except Exception:
            return f"R$ {float(amount):,.2f}"  # Default format if locale fails

    st.subheader("Total Revenue Per Year")
    TAHUN = ["2016", "2017", "2018"]
    columns = st.columns(3)
    
    for i, year in enumerate(TAHUN):
        with columns[i]:
            # Format the revenue value for each year in Brazilian currency
            formatted_revenue = format_brl(PENDAPATAN[i])
            ui.metric_card(
                title=year,  # Year as the title
                description=formatted_revenue  # Corresponding revenue formatted in BRL
            )
    
    # =============================== TOTAL REVENUE BY STATE =====================================================
    st.subheader("Total Revenue By State")
    #st.set_option('deprecation.showPyplotGlobalUse', False)
    
    # Group data by customer state and calculate total revenue
    revenue_by_state = all_data.groupby('customer_state')['total_revenue'].sum().reset_index()
    # Sort the states by total revenue in descending order
    revenue_by_state = revenue_by_state.sort_values(by='total_revenue', ascending=False)

    # Format revenue as Brazilian currency in a new column for labels
    revenue_by_state['formatted_revenue'] = revenue_by_state['total_revenue'].apply(format_brl)
    
    # Visualization
    plt.figure(figsize=(20, 8))
    ax = sns.barplot(x='customer_state', y='total_revenue', data=revenue_by_state, palette="pastel")
    sns.barplot(x='customer_state', y='total_revenue', data=revenue_by_state, palette="pastel")
    plt.xlabel('Customer State', fontsize=18)
    plt.ylabel('Total Revenue', fontsize=18)
    plt.xticks(rotation=45, ha='right')
    # Customize tick label sizes
    ax.tick_params(axis='x', labelsize=16)
    ax.tick_params(axis='y', labelsize=16)
    st.pyplot()
    # Running insight
    insight_revenue_1 = "Revenue from SÃ£o Paulo (SP) is the most contributed to revenue with total R$ 1.172754e+08, followed by Rio de Janeiro (RJ) and Minas Gerais (MG). SP generates far more revenue than any other state, indicating a substantial customer base or higher purchasing power there. The remaining states contribute progressively less, with some, like AC, AP, and RR, contributing minimally. This suggests that focusing on the top-performing states, particularly SP, could be beneficial for maximizing revenue impact"
    def stream_data_1():
        for word in insight_revenue_1.split(" "):
            yield word + " "
            time.sleep(0.02)
    if st.button("See Insight", key="insight_1"):
        st.write_stream(stream_data_1)
    
    # =============================== TOTAL REVENUE OVER TIME =====================================================
    st.subheader("Total Revenue Generated by Olist Over Time")
    all_data['order_purchase_timestamp'] = pd.to_datetime(all_data['order_purchase_timestamp'], errors='coerce')
    # Group by order purchase year and sum revenue
    revenue_over_time = all_data.groupby(all_data['order_purchase_timestamp'].dt.year)['price'].sum().reset_index()
    # Rename columns for clarity
    revenue_over_time.columns = ['Year', 'Total Revenue']
    # Visualization
    plt.figure(figsize=(10, 3))
    sns.lineplot(x='Year', y='Total Revenue', data=revenue_over_time, marker='o')
    plt.xlabel('Year')
    plt.ylabel('Total Revenue')
    plt.grid(True)
    #plt.show()
    st.pyplot()
    # Running insight
    insight_revenue_2 = "The growth in total revenue generated by Olist from 2016 to 2018, showing a steady upward trend. The revenue increases sharply between 2016 and 2017, and although the growth rate slows slightly, it continues to rise through to 2018. This trend suggests strong, sustained business growth over these years, possibly due to an expanding customer base, higher sales volumes, or improved marketing and operations."
    def stream_data_2():
        for word in insight_revenue_2.split(" "):
            yield word + " "
            time.sleep(0.02)
    if st.button("See Insight", key="insight_2"):
        st.write_stream(stream_data_2)
    
    # =============================== Product Categories =====================================================
    st.subheader("Product Categories That Have The Highest Average Profit Margins on Olist")
    all_data['profit_margin'] = (all_data['price'] - all_data['freight_value']) / all_data['price']
    category_profit_margins = all_data.groupby('product_category_name_english')['profit_margin'].mean().reset_index()
    category_profit_margins = category_profit_margins.sort_values(by='profit_margin', ascending=False)

    # Create a selector for top 5 and worst 5
    option = st.selectbox("Select View:", ["Top 10 Product Categories", "Worst 10 Product Categories"])

    if option == "Top 10 Product Categories":
        selected_categories = category_profit_margins.head(10)
    else:
        selected_categories = category_profit_margins.tail(10)

    # Plotting the selected categories
    plt.figure(figsize=(18, 6))
    sns.barplot(y='product_category_name_english', x='profit_margin', data=selected_categories, palette="pastel")

    # Adding data labels on the bars
    for index, value in enumerate(selected_categories['profit_margin']):
        plt.text(value, index, f"{value:.2f}", va='center')

    plt.ylabel('Product Category')
    plt.xlabel('Average Profit Margin')
    plt.tight_layout()  # Adjust layout to prevent labels from overlapping
    st.pyplot()
    # Running insight
    insight_revenue_3 = "The top 10 product categories with the highest average profit margins are led by computers (0.94) and security & services (0.85). Small appliances, watches & gifts, and fashion/children's clothes follow closely, with margins around 0.80. Air conditioning, cool stuff, tablets/printing/imaging, and construction/tools/safety have lower but still respectable profit margins, ranging from 0.76 to 0.79. In contrast, the worst 10 product categories with the lowest average profit margins are led by furniture, mattresses, and upholstery (0.55) and music (0.54). Food & drink, telephony, and fashion/underwear/beach follow closely, with margins around 0.50. Signaling and security, flowers, electronics, Christmas supplies, and DVDs/Blu-ray have even lower profit margins, ranging from 0.20 to 0.32."
    def stream_data_3():
        for word in insight_revenue_3.split(" "):
            yield word + " "
            time.sleep(0.02)
    if st.button("See Insight", key="insight_3"):
        st.write_stream(stream_data_3)
        
# ======================================================================================================
if __name__ == "__main__":
    main()